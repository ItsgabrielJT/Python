"""
This type stub file was generated by pyright.
"""

"""
Classes used for blocking interaction with figure windows:

`BlockingInput`
    Creates a callable object to retrieve events in a blocking way for
    interactive sessions.  Base class of the other classes listed here.

`BlockingKeyMouseInput`
    Creates a callable object to retrieve key or mouse clicks in a blocking
    way for interactive sessions.  Used by `~.Figure.waitforbuttonpress`.

`BlockingMouseInput`
    Creates a callable object to retrieve mouse clicks in a blocking way for
    interactive sessions.  Used by `~.Figure.ginput`.

`BlockingContourLabeler`
    Creates a callable object to retrieve mouse clicks in a blocking way that
    will then be used to place labels on a `.ContourSet`.  Used by
    `~.Axes.clabel`.
"""
_log = ...
class BlockingInput:
    """Callable for retrieving events in a blocking way."""
    def __init__(self, fig, eventslist=...) -> None:
        ...
    
    def on_event(self, event): # -> None:
        """
        Event handler; will be passed to the current figure to retrieve events.
        """
        ...
    
    def post_event(self): # -> None:
        """For baseclass, do nothing but collect events."""
        ...
    
    def cleanup(self): # -> None:
        """Disconnect all callbacks."""
        ...
    
    def add_event(self, event): # -> None:
        """For base class, this just appends an event to events."""
        ...
    
    def pop_event(self, index=...): # -> None:
        """
        Remove an event from the event list -- by default, the last.

        Note that this does not check that there are events, much like the
        normal pop method.  If no events exist, this will throw an exception.
        """
        ...
    
    pop = ...
    def __call__(self, n=..., timeout=...): # -> list[Unknown]:
        """Blocking call to retrieve *n* events."""
        ...
    


class BlockingMouseInput(BlockingInput):
    """
    Callable for retrieving mouse clicks in a blocking way.

    This class will also retrieve keypresses and map them to mouse clicks:
    delete and backspace are a right click, enter is like a middle click,
    and all others are like a left click.
    """
    button_add = ...
    button_pop = ...
    button_stop = ...
    def __init__(self, fig, mouse_add=..., mouse_pop=..., mouse_stop=...) -> None:
        ...
    
    def post_event(self): # -> None:
        """Process an event."""
        ...
    
    def mouse_event(self): # -> None:
        """Process a mouse click event."""
        ...
    
    def key_event(self): # -> None:
        """
        Process a key press event, mapping keys to appropriate mouse clicks.
        """
        ...
    
    def mouse_event_add(self, event): # -> None:
        """
        Process an button-1 event (add a click if inside axes).

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def mouse_event_stop(self, event): # -> None:
        """
        Process an button-2 event (end blocking input).

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def mouse_event_pop(self, event): # -> None:
        """
        Process an button-3 event (remove the last click).

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def add_click(self, event): # -> None:
        """
        Add the coordinates of an event to the list of clicks.

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def pop_click(self, event, index=...): # -> None:
        """
        Remove a click (by default, the last) from the list of clicks.

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def pop(self, event, index=...): # -> None:
        """
        Remove a click and the associated event from the list of clicks.

        Defaults to the last click.
        """
        ...
    
    def cleanup(self, event=...): # -> None:
        """
        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`, optional
            Not used
        """
        ...
    
    def __call__(self, n=..., timeout=..., show_clicks=...): # -> list[Unknown]:
        """
        Blocking call to retrieve *n* coordinate pairs through mouse clicks.
        """
        ...
    


class BlockingContourLabeler(BlockingMouseInput):
    """
    Callable for retrieving mouse clicks and key presses in a blocking way.

    Used to place contour labels.
    """
    def __init__(self, cs) -> None:
        ...
    
    def add_click(self, event): # -> None:
        ...
    
    def pop_click(self, event, index=...): # -> None:
        ...
    
    def button1(self, event): # -> None:
        """
        Process an button-1 event (add a label to a contour).

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def button3(self, event): # -> None:
        """
        Process an button-3 event (remove a label if not in inline mode).

        Unfortunately, if one is doing inline labels, then there is currently
        no way to fix the broken contour - once humpty-dumpty is broken, he
        can't be put back together.  In inline mode, this does nothing.

        Parameters
        ----------
        event : `~.backend_bases.MouseEvent`
        """
        ...
    
    def __call__(self, inline, inline_spacing=..., n=..., timeout=...): # -> None:
        ...
    


class BlockingKeyMouseInput(BlockingInput):
    """
    Callable for retrieving mouse clicks and key presses in a blocking way.
    """
    def __init__(self, fig) -> None:
        ...
    
    def post_event(self): # -> None:
        """Determine if it is a key event."""
        ...
    
    def __call__(self, timeout=...): # -> None:
        """
        Blocking call to retrieve a single mouse click or key press.

        Returns ``True`` if key press, ``False`` if mouse click, or ``None`` if
        timed out.
        """
        ...
    


