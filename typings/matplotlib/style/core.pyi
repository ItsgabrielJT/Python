"""
This type stub file was generated by pyright.
"""

import contextlib
from matplotlib import _api, docstring

"""
Core functions and attributes for the matplotlib style library:

``use``
    Select style sheet to override the current matplotlib settings.
``context``
    Context manager to use a style sheet temporarily.
``available``
    List available style sheets.
``library``
    A dictionary of style names and matplotlib settings.
"""
_log = ...
__all__ = ['use', 'context', 'available', 'library', 'reload_library']
@_api.caching_module_getattr
class __getattr__:
    STYLE_FILE_PATTERN = ...


BASE_LIBRARY_PATH = ...
USER_LIBRARY_PATHS = ...
STYLE_EXTENSION = ...
STYLE_BLACKLIST = ...
@docstring.Substitution("\n".join(map("- {}".format, sorted(STYLE_BLACKLIST, key=str.lower))))
def use(style): # -> None:
    """
    Use Matplotlib style settings from a style specification.

    The style name of 'default' is reserved for reverting back to
    the default style settings.

    .. note::

       This updates the `.rcParams` with the settings from the style.
       `.rcParams` not defined in the style are kept.

    Parameters
    ----------
    style : str, dict, Path or list
        A style specification. Valid options are:

        +------+-------------------------------------------------------------+
        | str  | The name of a style or a path/URL to a style file. For a    |
        |      | list of available style names, see `.style.available`.      |
        +------+-------------------------------------------------------------+
        | dict | Dictionary with valid key/value pairs for                   |
        |      | `matplotlib.rcParams`.                                      |
        +------+-------------------------------------------------------------+
        | Path | A path-like object which is a path to a style file.         |
        +------+-------------------------------------------------------------+
        | list | A list of style specifiers (str, Path or dict) applied from |
        |      | first to last in the list.                                  |
        +------+-------------------------------------------------------------+

    Notes
    -----
    The following `.rcParams` are not related to style and will be ignored if
    found in a style specification:

    %s
    """
    ...

@contextlib.contextmanager
def context(style, after_reset=...): # -> Generator[None, None, None]:
    """
    Context manager for using style settings temporarily.

    Parameters
    ----------
    style : str, dict, Path or list
        A style specification. Valid options are:

        +------+-------------------------------------------------------------+
        | str  | The name of a style or a path/URL to a style file. For a    |
        |      | list of available style names, see `.style.available`.      |
        +------+-------------------------------------------------------------+
        | dict | Dictionary with valid key/value pairs for                   |
        |      | `matplotlib.rcParams`.                                      |
        +------+-------------------------------------------------------------+
        | Path | A path-like object which is a path to a style file.         |
        +------+-------------------------------------------------------------+
        | list | A list of style specifiers (str, Path or dict) applied from |
        |      | first to last in the list.                                  |
        +------+-------------------------------------------------------------+

    after_reset : bool
        If True, apply style after resetting settings to their defaults;
        otherwise, apply style on top of the current settings.
    """
    ...

@_api.deprecated("3.5")
def load_base_library(): # -> dict[Unknown, Unknown]:
    """Load style library defined in this package."""
    ...

@_api.deprecated("3.5")
def iter_user_libraries(): # -> Generator[str, None, None]:
    ...

def update_user_library(library):
    """Update style library with user-defined rc files."""
    ...

def read_style_directory(style_dir): # -> dict[Unknown, Unknown]:
    """Return dictionary of styles defined in *style_dir*."""
    ...

def update_nested_dict(main_dict, new_dict):
    """
    Update nested dict (only level of nesting) with new values.

    Unlike `dict.update`, this assumes that the values of the parent dict are
    dicts (or dict-like), so you shouldn't replace the nested dict if it
    already exists. Instead you should update the sub-dict.
    """
    ...

_base_library = ...
library = ...
available = ...
def reload_library(): # -> None:
    """Reload the style library."""
    ...

