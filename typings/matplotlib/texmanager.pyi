"""
This type stub file was generated by pyright.
"""

import functools

r"""
Support for embedded TeX expressions in Matplotlib.

Requirements:

* LaTeX.
* \*Agg backends: dvipng>=1.6.
* PS backend: PSfrag, dvips, and Ghostscript>=9.0.
* PDF and SVG backends: if LuaTeX is present, it will be used to speed up some
  post-processing steps, but note that it is not used to parse the TeX string
  itself (only LaTeX is supported).

To enable TeX rendering of all text in your Matplotlib figure, set
:rc:`text.usetex` to True.

TeX and dvipng/dvips processing results are cached
in ~/.matplotlib/tex.cache for reuse between sessions.

`TexManager.get_rgba` can also be used to directly obtain raster output as RGBA
NumPy arrays.
"""
_log = ...
class TexManager:
    """
    Convert strings to dvi files using TeX, caching the results to a directory.

    Repeated calls to this constructor always return the same instance.
    """
    texcache = ...
    _grey_arrayd = ...
    _font_family = ...
    _font_families = ...
    _font_info = ...
    _font_types = ...
    grey_arrayd = ...
    font_family = ...
    font_families = ...
    font_info = ...
    @functools.lru_cache()
    def __new__(cls): # -> Self@TexManager:
        ...
    
    def get_font_config(self): # -> str:
        ...
    
    def get_basefile(self, tex, fontsize, dpi=...): # -> str:
        """
        Return a filename based on a hash of the string, fontsize, and dpi.
        """
        ...
    
    def get_font_preamble(self): # -> str:
        """
        Return a string containing font configuration for the tex preamble.
        """
        ...
    
    def get_custom_preamble(self):
        """Return a string containing user additions to the tex preamble."""
        ...
    
    def make_tex(self, tex, fontsize): # -> str:
        """
        Generate a tex file to render the tex string at a specific font size.

        Return the file name.
        """
        ...
    
    def make_dvi(self, tex, fontsize): # -> str:
        """
        Generate a dvi file containing latex's layout of tex string.

        Return the file name.
        """
        ...
    
    def make_png(self, tex, fontsize, dpi): # -> str:
        """
        Generate a png file containing latex's rendering of tex string.

        Return the file name.
        """
        ...
    
    def get_grey(self, tex, fontsize=..., dpi=...):
        """Return the alpha channel."""
        ...
    
    def get_rgba(self, tex, fontsize=..., dpi=..., rgb=...): # -> NDArray[float64]:
        r"""
        Return latex's rendering of the tex string as an rgba array.

        Examples
        --------
        >>> texmanager = TexManager()
        >>> s = r"\TeX\ is $\displaystyle\sum_n\frac{-e^{i\pi}}{2^n}$!"
        >>> Z = texmanager.get_rgba(s, fontsize=12, dpi=80, rgb=(1, 0, 0))
        """
        ...
    
    def get_text_width_height_descent(self, tex, fontsize, renderer=...): # -> tuple[Literal[0], Literal[0], Literal[0]] | tuple[Unknown, Unknown, Unknown]:
        """Return width, height and descent of the text."""
        ...
    


