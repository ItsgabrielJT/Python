"""
This type stub file was generated by pyright.
"""

from matplotlib import _api

class SubplotBase:
    """
    Base class for subplots, which are :class:`Axes` instances with
    additional methods to facilitate generating and manipulating a set
    of :class:`Axes` within a figure.
    """
    def __init__(self, fig, *args, **kwargs) -> None:
        """
        Parameters
        ----------
        fig : `matplotlib.figure.Figure`

        *args : tuple (*nrows*, *ncols*, *index*) or int
            The array of subplots in the figure has dimensions ``(nrows,
            ncols)``, and *index* is the index of the subplot being created.
            *index* starts at 1 in the upper left corner and increases to the
            right.

            If *nrows*, *ncols*, and *index* are all single digit numbers, then
            *args* can be passed as a single 3-digit number (e.g. 234 for
            (2, 3, 4)).

        **kwargs
            Keyword arguments are passed to the Axes (sub)class constructor.
        """
        ...
    
    @_api.deprecated("3.4", alternative="get_subplotspec", addendum="(get_subplotspec returns a SubplotSpec instance.)")
    def get_geometry(self): # -> tuple[Unknown, Unknown, Any | int | Unknown]:
        """Get the subplot geometry, e.g., (2, 2, 3)."""
        ...
    
    @_api.deprecated("3.4", alternative="set_subplotspec")
    def change_geometry(self, numrows, numcols, num): # -> None:
        """Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3)."""
        ...
    
    def get_subplotspec(self): # -> SubplotSpec:
        """Return the `.SubplotSpec` instance associated with the subplot."""
        ...
    
    def set_subplotspec(self, subplotspec): # -> None:
        """Set the `.SubplotSpec`. instance associated with the subplot."""
        ...
    
    def get_gridspec(self): # -> GridSpec:
        """Return the `.GridSpec` instance associated with the subplot."""
        ...
    
    @_api.deprecated("3.4", alternative="get_position()")
    @property
    def figbox(self):
        ...
    
    @_api.deprecated("3.4", alternative="get_gridspec().nrows")
    @property
    def numRows(self): # -> Any:
        ...
    
    @_api.deprecated("3.4", alternative="get_gridspec().ncols")
    @property
    def numCols(self): # -> Any:
        ...
    
    @_api.deprecated("3.4")
    def update_params(self): # -> None:
        """Update the subplot position from ``self.figure.subplotpars``."""
        ...
    
    @_api.deprecated("3.4", alternative="ax.get_subplotspec().is_first_row()")
    def is_first_row(self): # -> bool:
        ...
    
    @_api.deprecated("3.4", alternative="ax.get_subplotspec().is_last_row()")
    def is_last_row(self): # -> Any:
        ...
    
    @_api.deprecated("3.4", alternative="ax.get_subplotspec().is_first_col()")
    def is_first_col(self): # -> bool:
        ...
    
    @_api.deprecated("3.4", alternative="ax.get_subplotspec().is_last_col()")
    def is_last_col(self): # -> Any:
        ...
    
    def label_outer(self): # -> None:
        """
        Only show "outer" labels and tick labels.

        x-labels are only kept for subplots on the last row (or first row, if
        labels are on the top side); y-labels only for subplots on the first
        column (or last column, if labels are on the right side).
        """
        ...
    


subplot_class_factory = ...
Subplot = ...
